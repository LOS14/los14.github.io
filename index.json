[{"content":"Ubuntu分辨率修改 问题 重装ubuntu18.04后，安装todesk远程过去的时候提示无法连接。\n解决方法 $ sudo apt update $ sudo apt full-upgrade $ sudo apt upgrade $ sudo apt dist-upgrade 主要是更新kernel Linux ZH-Server 5.4.0-131-generic #147~18.04.1-Ubuntu SMP Sat Oct 15 13:10:18 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux 更新/etc/profile xrandr获取display的名称 Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 1920 x 2048 VGA-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 0mm x 0mm 1024x768 60.00 800x600 60.32 56.25 640x480 59.94 1920x1080_60.00 59.96* 然后在/etc/profile最后添加以下两句 xrandr --newmode \u0026#34;1920x1080_60.00\u0026#34; 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync xrandr --addmode VGA-1 \u0026#34;1920x1080_60.00\u0026#34; ","permalink":"https://blog.trustyapp.com/posts/server/server_display/","summary":"Ubuntu分辨率修改 问题 重装ubuntu18.04后，安装todesk远程过去的时候提示无法连接。 解决方法 $ sudo apt update $ sudo apt full-upgrade $ sudo apt upgrade $ sudo apt dist-upgrade 主要是更新kernel Linux ZH-Server 5.4.0-131-generic #147~18.04.1-Ubuntu SMP Sat Oct 15 13:10:18 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux 更新/etc/profile xrandr获取display的名称 Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 1920","title":"Ubuntu分辨率修改"},{"content":"NAS上搭建Opengrok代码搜索引擎 一. 功能背景 使用opengrok搭建多项目搜索 opengrok-1.1-rc34 ubuntu18.04 + tomcat8 + ctags + openjdk-8 二. 自动创建、同步脚本 #!/bin/bash LOCAL_PATH=`pwd` WEB_APP=\u0026#34;/var/lib/tomcat8/webapps\u0026#34; createPrj(){ export OPENGROK_GENERATE_HISTORY=0 export OPENGROK_INSTANCE_BASE=$LOCAL_PATH/index/$1 export OPENGROK_WEBAPP_NAME=$1 export OPENGROK_WEBAPP_CONTEXT=$1 export OPENGROK_WEBAPP_CFGADDR=http://localhost:8080/$1 ./bin/OpenGrok deploy } indexPrj(){ ./bin/OpenGrok index $LOCAL_PATH/database/$1 } rootHtml(){ projects=\u0026#34;\u0026#34; indexInfo=\u0026#34;\u0026#34; html=$(cat \u0026#34;./ROOT/index.html\u0026#34;) for dir in `ls $WEB_APP`;do if [[ -d \u0026#34;$WEB_APP/$dir\u0026#34; ]] \u0026amp;\u0026amp; [[ \u0026#34;ROOT\u0026#34; != $dir ]]; then projects=\u0026#34;\u0026lt;li\u0026gt;\u0026lt;a href=\\\u0026#34;/$dir/\\\u0026#34;\u0026gt;$dir\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\\n\u0026#34;\u0026#34;$projects\u0026#34; indexLog=\u0026#34;./index/$dir/log/opengrok0.0.log\u0026#34; lastIndex=`stat --format=%y $indexLog` lastIndex=${lastIndex%.*} indexInfo=\u0026#34;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;$lastIndex\u0026lt;/b\u0026gt; - New Index: \u0026lt;a href=\\\u0026#34;/$dir/\\\u0026#34;\u0026gt;$dir\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\\n\u0026#34;\u0026#34;$indexInfo\u0026#34; fi done html=${html//projects/$projects} html=${html//project_index/$indexInfo} rm -rf $WEB_APP/ROOT mkdir -p $WEB_APP/ROOT echo -e \u0026#34;$html\u0026#34; \u0026gt;$WEB_APP/ROOT/index.html cp ./ROOT/style.css $WEB_APP/ROOT/style.css rm -rf $WEB_APP/*.war } main(){ for dir in `ls database`;do rm -rf $database/$dir/{prebuilts,developers,development} if [[ $1 == \u0026#34;create\u0026#34; ]];then createPrj $dir fi indexPrj $dir done rootHtml /etc/init.d/tomcat8 restart } main $* 三. 后记 本功能在于opengrok的版本选择，opengrok-1.1-rc34版本正好简单安装在ubuntu18.04上，不追求最新版，只求最稳定\n","permalink":"https://blog.trustyapp.com/posts/server/nas_opengrok/","summary":"NAS上搭建Opengrok代码搜索引擎 一. 功能背景 使用opengrok搭建多项目搜索 opengrok-1.1-rc34 ubuntu18.04 + tomcat8 + ctags + openjdk-8 二. 自动创建、同步脚本 #!/bin/bash LOCAL_PATH=`pwd` WEB_APP=\u0026#34;/var/lib/tomcat8/webapps\u0026#34; createPrj(){ export OPENGROK_GENERATE_HISTORY=0 export OPENGROK_INSTANCE_BASE=$LOCAL_PATH/index/$1 export OPENGROK_WEBAPP_NAME=$1 export OPENGROK_WEBAPP_CONTEXT=$1 export OPENGROK_WEBAPP_CFGADDR=http://localhost:8080/$1 ./bin/OpenGrok deploy } indexPrj(){ ./bin/OpenGrok index $LOCAL_PATH/database/$1 } rootHtml(){ projects=\u0026#34;\u0026#34; indexInfo=\u0026#34;\u0026#34; html=$(cat \u0026#34;./ROOT/index.html\u0026#34;) for dir in `ls $WEB_APP`;do if [[ -d \u0026#34;$WEB_APP/$dir\u0026#34; ]] \u0026amp;\u0026amp; [[ \u0026#34;ROOT\u0026#34; != $dir ]]; then projects=\u0026#34;\u0026lt;li\u0026gt;\u0026lt;a href=\\\u0026#34;/$dir/\\\u0026#34;\u0026gt;$dir\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\\n\u0026#34;\u0026#34;$projects\u0026#34; indexLog=\u0026#34;./index/$dir/log/opengrok0.0.log\u0026#34; lastIndex=`stat --format=%y $indexLog` lastIndex=${lastIndex%.*} indexInfo=\u0026#34;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;$lastIndex\u0026lt;/b\u0026gt; - New Index: \u0026lt;a href=\\\u0026#34;/$dir/\\\u0026#34;\u0026gt;$dir\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\\n\u0026#34;\u0026#34;$indexInfo\u0026#34; fi done html=${html//projects/$projects} html=${html//project_index/$indexInfo} rm -rf $WEB_APP/ROOT mkdir -p $WEB_APP/ROOT echo -e \u0026#34;$html\u0026#34; \u0026gt;$WEB_APP/ROOT/index.html cp ./ROOT/style.css $WEB_APP/ROOT/style.css rm -rf $WEB_APP/*.war }","title":"NAS上搭建Opengrok代码搜索引擎"},{"content":"Github批量创建项目 1. 功能背景 AOSP的代码是使用repo管理的，需要上传至github上的时候需要批量创建项目。\n2. 功能构思 从源代码库的.repo/manifests/default.xml文件中读取出来每一个项目的name及path，然后使用github的api批量创建项目，这里要注意的是qcom提供的代码是使用斜杠分开的，而我们在github中是使用了类似lineageos中的做法将斜杠用下划线代替。\n3. fuck code createTask(){ #system/tools/mkbootimg : LineageOS/android_system_tools_mkbootimg line=$1 prj_name=${line##*:} prj_name=${prj_name//\\//_} prj_name=`eval echo $prj_name` while true; do index=$[RANDOM%${#PRI_TOKEN[@]}] token=${PRI_TOKEN[$index]} resp=`curl -s -X POST -H \u0026#34;Accept: application/vnd.github+json\u0026#34; -H \u0026#34;Authorization: Bearer $token\u0026#34; -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;$prj_name\\\u0026#34;,\\\u0026#34;private\\\u0026#34;:\\\u0026#34;true\\\u0026#34;,\\\u0026#34;has_issues\\\u0026#34;:\\\u0026#34;fasle\\\u0026#34;,\\\u0026#34;has_projects\\\u0026#34;:\\\u0026#34;true\\\u0026#34;,\\\u0026#34;has_wiki\\\u0026#34;:\\\u0026#34;false\\\u0026#34;,\\\u0026#34;auto_init\\\u0026#34;:\\\u0026#34;false\\\u0026#34;}\u0026#34; https://api.github.com/orgs/$org/repos` if [[ $resp == *\u0026#34;secondary rate limit\u0026#34;* ]]; then echo -e \u0026#34;$token : $prj_name -----\u0026gt; rate limit\u0026#34; sleep 15s else msg=`echo $resp | jq \u0026#39;.url\u0026#39;` if [ \u0026#34;$msg\u0026#34; == \u0026#34;null\u0026#34; ];then msg=`echo $resp | jq \u0026#39;.errors[0].message\u0026#39;` fi echo -e \u0026#34;$token : $prj_name -----\u0026gt; $msg\u0026#34; sleep 5s break fi done } syncCreate(){ IFS=$\u0026#39;\\n\u0026#39; for line in $repolist;do createTask $line #break; done } 4. 多线程push代码 pushTask(){ #system/tools/mkbootimg : LineageOS/android_system_tools_mkbootimg line=$1 prj_path=${line%%:*} prj_path=`eval echo $prj_path` prj_name=${line##*:} #prj_name=${prj_name#*LineageOS/} prj_name=${prj_name//\\//_} prj_name=`eval echo $prj_name` cd $prj_path REMOTE=git@github.com:$org/${prj_name} cmd=\u0026#34;git push --porcelain --all $REMOTE\u0026#34; if [ -n \u0026#34;$branch\u0026#34; ]; then cmd=\u0026#34;git push --porcelain $REMOTE HEAD:refs/heads/$branch\u0026#34; fi pushres=`eval $cmd` if [[ $pushres == *\u0026#34;Done\u0026#34;* ]]; then echo \u0026#34;$cmd ---\u0026gt; succed\u0026#34; else echo \u0026#34;$cmd ---\u0026gt; failed $pushres\u0026#34; echo \u0026#34;$prj_path:$prj_name\u0026#34; \u0026gt;\u0026gt;$logpath fi cd - \u0026gt;/dev/null } asyncPush(){ fifofile=\u0026#34;/tmp/$$.fifo\u0026#34; mkfifo $fifofile exec 6\u0026lt;\u0026gt;$fifofile rm -rf $fifofile thread_num=10 job_num=${#repolist[@]} for ((i=0;i\u0026lt;${thread_num};i++)); do echo \u0026gt;\u0026amp;6 done rm -rf $logpath IFS=$\u0026#39;\\n\u0026#39; for line in $repolist;do { read -u6 pushTask $line echo \u0026gt;\u0026amp;6 }\u0026amp; done wait exec 6\u0026lt;\u0026amp;- exec 6\u0026gt;\u0026amp;- echo \u0026#34;sync end\u0026#34; } 5. 输出新的manifest.xml文件 toXml(){ rm -rf manifest_new.xml while read line do pline=$line if [[ $line == \\\u0026lt;project* ]];then #echo $line prj_name=${line#*name=\\\u0026#34;} prj_name=${prj_name%%\\\u0026#34;*} prj_path=${line#*path=\\\u0026#34;} prj_path=${prj_path%%\\\u0026#34;*} end=${line##*\\\u0026#34;} pline=\u0026#34;\u0026lt;project name=\\\u0026#34;$prj_name\\\u0026#34; path=\\\u0026#34;$prj_path\\\u0026#34; $end\u0026#34; fi echo $pline \u0026gt;\u0026gt; manifest_new.xml done \u0026lt; .repo/manifests/default.xml } 6. 后记 github创建项目如果过快会触发secondary rate limit 因此，可以多拿几个token随机使用创建项目，而gitlab却没有这种限制。\n","permalink":"https://blog.trustyapp.com/posts/blog/github_newproject/","summary":"Github批量创建项目 1. 功能背景 AOSP的代码是使用repo管理的，需要上传至github上的时候需要批量创建项目。 2. 功能构思 从源代码库的.repo/manifests/default.xml文件中读取出来每一个项目的name及path，然后使用github的api批量创建项目","title":"Github批量创建项目"},{"content":"高通代码下载(2022年版) 高通代码地址已经更换\nhttps://wiki.codelinaro.org/en/clo/la/release-backup\nrepo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.UM.5.5.r1-06100-8x96.0.xml ","permalink":"https://blog.trustyapp.com/posts/blog/qcom_source/","summary":"高通代码下载(2022年版) 高通代码地址已经更换 https://wiki.codelinaro.org/en/clo/la/release-backup repo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.UM.5.5.r1-06100-8x96.0.xml","title":"高通代码下载(2022年版)"},{"content":"","permalink":"https://blog.trustyapp.com/posts/blog/blog/","summary":"","title":"Blog"},{"content":"","permalink":"https://blog.trustyapp.com/posts/archives/archives/","summary":"","title":"Archives"},{"content":"","permalink":"https://blog.trustyapp.com/posts/script/script/","summary":"","title":"Script"},{"content":"","permalink":"https://blog.trustyapp.com/posts/server/server/","summary":"","title":"Server"},{"content":" Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 787018782\n","permalink":"https://blog.trustyapp.com/links/","summary":"Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 787018782","title":"🤝友链"},{"content":"关于我\n姓名: 扬帆起航 职业: 程序员 运动: 跑步、乒乓球、爬山 ","permalink":"https://blog.trustyapp.com/about/","summary":"关于我 姓名: 扬帆起航 职业: 程序员 运动: 跑步、乒乓球、爬山","title":"🙋🏻‍♂️关于"}]